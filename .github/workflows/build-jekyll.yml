name: Build and Deploy to Github Pages

on:
  schedule:
    - cron:  '*/15 * * * *'
  push:
    branches:
      - main  # Here source code branch is `master`, it could be other branch
  workflow_dispatch:

jobs:
  get_data:
    runs-on: ubuntu-latest
    concurrency: get_data
    permissions:
          contents: write
          actions: write
          checks: write
    steps:
      - name: Checkout Code
        uses: actions/checkout@v2
        with:
          persist-credentials: false

      - name: Setup Python Environment
        uses: actions/setup-python@v2
        with:
          python-version: 3.8

      - name: Install Requirements
        run: pip install -r requirements.txt

      - name: setup git config
        run: |
          git config --local user.name ${{ secrets.USERNAME_GITHUB }}
          git config --local user.email ${{ secrets.EMAIL }}
          git pull --ff-only origin main
          
      - name: Execute Recipes Python script
        run: |
          python3 -m papexp
          git add assets/images/recipes/*
          git add .
          git pull --ff-only origin main
        env:
          EMAIL: ${{ secrets.EMAIL }}
          PASSWORD: ${{ secrets.PASSWORD }}

      - name: Execute Diary Python script
        run: |
          python3 -m mndexp
          mv recent_food.yml _data/recent_food.yml
          git add _data/recent_food.yml
          git pull --ff-only origin main
        env:
          MY_NET_DIARY_LOGIN: ${{ secrets.MY_NET_DIARY_LOGIN }}
          MY_NET_DIARY_PASSWORD: ${{ secrets.MY_NET_DIARY_PASSWORD }}

      - name: commit
        id: get_data
        run: |
          git commit -am "Build -> Update recipes [skip actions]" || echo "::set-output name=status::Nothing to update"
      - name: Push changes
        if: steps.recipes.outputs.status != 'Nothing to update'
        uses: ad-m/github-push-action@master
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          branch: ${{ github.ref }}
    outputs:
      status: ${{ steps.recipes.outputs.status }}


  build_and_deploy:
    concurrency: deployment
    runs-on: ubuntu-20.04
    permissions:
          contents: write
          actions: write
          checks: write
    needs: get_data
    if: github.event_name != 'schedule' ||needs.recipes.outputs.status != 'Nothing to update'
    steps:
      - name: Echo variables
        run: |
          echo "event name: ${{github.event_name}}"
          echo "commit message: ${{github.event.commits[0].message}}"
          echo "short version: ${{ needs.diary.outputs.status }}"
      
      - uses: actions/checkout@v2
        with:
          fetch-depth: zero

      # Use GitHub Actions' cache to cache dependencies on servers
      - uses: actions/cache@v2
        with:
          path: vendor/bundle
          key: ${{ runner.os }}-gems-tse-${{ hashFiles('**/Gemfile.lock') }}
          restore-keys: |
            ${{ runner.os }}-gems-tse-

      # Use GitHub Actions' cache to cache site on servers
      - uses: actions/cache@v2
        with:
          path: build
          key: ${{ runner.os }}-build-tse-${{ hashFiles('**/_data/picture.yml') }}
          restore-keys: |
            ${{ runner.os }}-build-tse-

      # Use GitHub Deploy Action to build and deploy to Github
      - uses: datapolitical/jekyll-deploy-action@master
        with:
          provider: 'github'
          token: ${{ secrets.GITHUB_TOKEN }} # It's your Personal Access Token(PAT)
          repository: ''             # Default is current repository
          branch: 'gh-pages'         # Default is gh-pages for github provider
          jekyll_src: './'           # Default is root directory
          jekyll_cfg: '_config.yml'  # Default is _config.yml
          jekyll_baseurl: ''         # Default is according to _config.yml
          bundler_ver: '>=0'         # Default is latest bundler version
          cname: 'www.chrisfnicholson.com'                  # Default is to not use a cname
          actor: ''                  # Default is the GITHUB_ACTOR
          pre_build_commands: 'pacman -S --noconfirm imagemagick libwebp'

      # Create Version
      - name: Create Version
        id: create_version
        uses: paulhatch/semantic-version@v3.2
        with:
          # The prefix to use to identify tags
          branch: "main"
          # The prefix to use to identify tags
          tag_prefix: "v"
          # A string which, if present in a git commit, indicates that a change represents a
          # major (breaking) change
          major_pattern: "(MAJOR)"
          # Same as above except indicating a minor change
          minor_pattern: "(MINOR)"
          # A string to determine the format of the version output
          format: "${major}.${minor}.${patch}"
          # Optional path to check for changes. If any changes are detected in the path the
          # 'changed' output will true. Enter multiple paths separated by spaces.
          # change_path: "src/my-service"
          # Named version, will be used as suffix for name version tag
          # namespace: project-b
          # Indicate whether short tags like 'v1' should be supported. If false only full
          # tags like 'v1.0.0' will be recognized.
          short_tags: true
          # If this is set to true, *every* commit will be treated as a new version.
          bump_each_commit: false

      - name: Changelog
        uses: scottbrenner/generate-changelog-action@master
        id: Changelog
        env:
          REPO: ${{ github.repository }}

      #Create Release
      - name: Create Release
        if: steps.create_version.outputs.patch == 0
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
        with:
          tag_name: v${{ steps.create_version.outputs.version }}
          release_name: Release ${{ steps.create_version.outputs.version }}
          body: |
            ${{ steps.Changelog.outputs.changelog }}

          draft: false
          prerelease: false
