name: Update External Data and Release

on:
  schedule:
    - cron: "*/15 * * * *"
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  get_data:
    runs-on: ubuntu-latest
    concurrency: get_data
    permissions:
      contents: write
      actions: write
      checks: write
    steps:
      - name: Setup Key #webfactory/ssh-agent
        uses: webfactory/ssh-agent@v0.5.3
        with:
          # Private SSH key to register in the SSH agent
          ssh-private-key: ${{ secrets.DEPLOY_KEY }}

      - name: Checkout Code
        uses: actions/checkout@v2
        with:
          persist-credentials: false

      - name: Setup Python Environment
        uses: actions/setup-python@v2
        with:
          python-version: 3.11.4

      - name: Install Requirements
        run: pip install -r requirements.txt

      - name: Execute Reads Python script
        run: |
          python3 parserss.py
          git add _data/reads.json
          git pull --ff-only origin ${{ github.ref_name }}

      - name: Execute Recipes Python script
        run: |
          python3 -m papexp
          git add assets/images/recipes/*
          git add _data/recipes.yaml
          git pull --ff-only origin ${{ github.ref_name }}
        env:
          PAPRIKA_EMAIL: ${{ secrets.PAPRIKA_EMAIL }}
          PAPRIKA_PASSWORD: ${{ secrets.PAPRIKA_PASSWORD }}

      - name: Execute Diary Python script
        run: |
          python3 -m mndexp
          mv recent_food.yml _data/recent_food.yml
          mv steps.yml _data/steps.yml
          git add _data/recent_food.yml
          git add _data/steps.yml
          echo "Recent Food:"
          cat _data/recent_food.yml
          echo "\n"
          git pull --ff-only origin ${{ github.ref_name }}
        env:
          MY_NET_DIARY_LOGIN: ${{ secrets.MY_NET_DIARY_LOGIN }}
          MY_NET_DIARY_PASSWORD: ${{ secrets.MY_NET_DIARY_PASSWORD }}

      - name: check_sums
        id: check_sums
        run: |
          md5sum _data/recipes.yaml > recipes.md5
          md5sum _data/recent_food.yml > recent_food.md5
          md5sum _data/reads.json > reads.md5
          
          curl https://www.chrisfnicholson.com/recipes.md5 --output recipes_live.md5
          curl https://www.chrisfnicholson.com/recent_food.md5 --output recent_food_live.md5
          curl https://www.chrisfnicholson.com/reads.md5 --output reads_live.md5
          echo "md5s"
          echo "downloaded"
          cat reads_live.md5
          echo "created here"
          cat reads.md5
          
          echo "recipes cat check"
          echo $(( $(cat recipes.md5) == $(cat recipes_live.md5) ))
          echo "recent food cat check"
          echo $(( $(cat recent_food.md5) == $(cat recent_food_live.md5) ))
          echo $(( $(cat reads.md5) == $(cat reads_live.md5) ))
          
          md5sum --status -c recipes_live.md5
          md5sum --status -c recent_food_live.md5
          md5sum --status -c reads_live.md5 
          
          declare -i COMBINED_CHECK=0
          COMBINED_CHECK=`cmp -s recipes.md5 recipes_live.md5` | `cmp -s  recent_food.md5 recent_food_live.md5` | `cmp -s reads.md5 reads_live.md5`
          echo "combined_check=$COMBINED_CHECK" >> "$GITHUB_OUTPUT"
        
      - name: commit
        id: get_data
        run: |
          git commit -am "Update External Data" || echo "::set-output name=status::Nothing to update"
      - name: Push changes
        if: steps.get_data.outputs.status != 'Nothing to update' && ${{ !env.ACT }} && 'disabled' == 'yes'
        run: |
          git push "https://${{github.actor}}:${{github.token}}@github.com/${{github.repository}}.git" "HEAD:${{github.ref_name}}"
    outputs:
      status: ${{ steps.get_data.outputs.status }}
      combined_check: ${{ steps.check_sums.outputs.combined_check }}

  jekyll:
    runs-on: ubuntu-latest
    concurrency: new_deployment
    needs: get_data
    if: github.event_name == 'push' || needs.check_sums.outputs.combined_check != 0
    steps:
      - name: deploy
        run: |
          curl -X POST "${{ secrets.CLOUDFLARE_SITE_DEPLOY }}"  



  release:
    runs-on: ubuntu-latest
    concurrency: release
    needs: get_data
    if: github.event_name == 'push' && needs.get_data.outputs.status != 'Nothing to update' && github.ref_name == 'main'
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: zero
          ref: ${{ github.ref }}

      # Create Version
      - name: Create Version
        id: create_version
        uses: paulhatch/semantic-version@v4.0.3
        with:
          # The prefix to use to identify tags
          branch: ${{ github.ref_name }}
          # The prefix to use to identify tags
          tag_prefix: "v"
          # A string which, if present in a git commit, indicates that a change represents a
          # major (breaking) change
          major_pattern: "(MAJOR)"
          # Same as above except indicating a minor change
          minor_pattern: "(MINOR)"
          # A string to determine the format of the version output
          format: "${major}.${minor}.${patch}"
          # Optional path to check for changes. If any changes are detected in the path the
          # 'changed' output will true. Enter multiple paths separated by spaces.
          # change_path: "src/my-service"
          # Named version, will be used as suffix for name version tag
          # namespace: project-b
          # Indicate whether short tags like 'v1' should be supported. If false only full
          # tags like 'v1.0.0' will be recognized.
          short_tags: true
          # If this is set to true, *every* commit will be treated as a new version.
          bump_each_commit: false

      - name: Generate changelog
        id: changelog
        uses: metcalfc/changelog-generator@v2.0.0
        with:
          myToken: ${{ secrets.GITHUB_TOKEN }}

      #Add Date To Changelog
      - name: Get current date
        id: date
        run: echo "::set-output name=date::$(date +'%Y-%m-%d')"

      - name: Modify the changelog
        id: modified
        run: |
          set -o noglob
          log=$(cat << "EOF" | sed '/gh-pages\|skip actions/d' | tac
          ${{ steps.changelog.outputs.changelog }}

          ${{
          steps.date.outputs.date }}
          EOF
          )
          log="${log//'%'/'%25'}"
          log="${log//$'\n'/'%0A'}"
          log="${log//$'\r'/'%0D'}"
          echo "::set-output name=modified::$log"

      - name: Print the modified changelog
        run: |
          cat << "EOF"
          ${{ steps.modified.outputs.modified }}
          EOF

      #Create Release
      - name: Create Release
        if: steps.create_version.outputs.patch == 0 || contains(github.event.commits[0].message, '(PATCH)')
        id: create_release
        uses: ncipollo/release-action@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
          tag: v${{ steps.create_version.outputs.version }}
          name: Release ${{ steps.create_version.outputs.version }}
          body: |
            ${{ steps.modified.outputs.modified }}

          draft: false
          prerelease: false
          commit: ${{ github.ref_name }}
